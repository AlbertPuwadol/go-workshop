// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IRabbitMQ is an autogenerated mock type for the IRabbitMQ type
type IRabbitMQ struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IRabbitMQ) Close() {
	_m.Called()
}

// Consume provides a mock function with given fields: queuename, callback
func (_m *IRabbitMQ) Consume(queuename string, callback func([]byte)) {
	_m.Called(queuename, callback)
}

// CreateQueue provides a mock function with given fields: queuename
func (_m *IRabbitMQ) CreateQueue(queuename string) error {
	ret := _m.Called(queuename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(queuename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: queuename, ctx, message
func (_m *IRabbitMQ) Publish(queuename string, ctx context.Context, message []byte) error {
	ret := _m.Called(queuename, ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context, []byte) error); ok {
		r0 = rf(queuename, ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRabbitMQ creates a new instance of IRabbitMQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRabbitMQ(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRabbitMQ {
	mock := &IRabbitMQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
