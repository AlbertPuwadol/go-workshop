// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/AlbertPuwadol/go-workshop/pkg/entity"
	mock "github.com/stretchr/testify/mock"
)

// ITimeline is an autogenerated mock type for the ITimeline type
type ITimeline struct {
	mock.Mock
}

// CreateQueue provides a mock function with given fields: queuename
func (_m *ITimeline) CreateQueue(queuename entity.Hashtag) error {
	ret := _m.Called(queuename)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Hashtag) error); ok {
		r0 = rf(queuename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTimeline provides a mock function with given fields: hashtag
func (_m *ITimeline) GetTimeline(hashtag string) ([]entity.Data, error) {
	ret := _m.Called(hashtag)

	var r0 []entity.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Data, error)); ok {
		return rf(hashtag)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Data); ok {
		r0 = rf(hashtag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hashtag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: queuename, ctx, data
func (_m *ITimeline) Publish(queuename string, ctx context.Context, data []entity.Data) error {
	ret := _m.Called(queuename, ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context, []entity.Data) error); ok {
		r0 = rf(queuename, ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITimeline creates a new instance of ITimeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITimeline(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITimeline {
	mock := &ITimeline{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
